/** @type {import("eslint").Linter.Config} */
module.exports = {
	root: true,
	parser: "@typescript-eslint/parser",
	parserOptions: {
		tsconfigRootDir: __dirname,
		project: ["./apps/*/tsconfig.json", "./packages/*/tsconfig.json"],
	},
	plugins: ["@typescript-eslint"],
	extends: ["plugin:@typescript-eslint/recommended"],
	rules: {
		curly: "error",
		camelcase: [
			"error",
			{ properties: "never", ignoreDestructuring: false, ignoreImports: true },
		],
		"dot-notation": "error",
		eqeqeq: ["error", "always"],
		"func-style": ["warn", "declaration", { allowArrowFunctions: false }],
		"func-names": ["error", "as-needed"],
		"logical-assignment-operators": ["error", "always"],
		"@typescript-eslint/no-unused-vars": [
			"error",
			{
				argsIgnorePattern: "^_",
				varsIgnorePattern: "^_",
				caughtErrorsIgnorePattern: "^_",
			},
		],
		"@typescript-eslint/require-await": "error",
		"@typescript-eslint/no-throw-literal": "warn",
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/consistent-type-exports": "error",
		"@typescript-eslint/consistent-type-imports": "error",
		"@typescript-eslint/no-var-requires": "error",
		"@typescript-eslint/no-require-imports": "error",
		"@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
		"@typescript-eslint/ban-types": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-non-null-assertion": "error",
		"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
		"@typescript-eslint/no-unnecessary-condition": "error",
		"@typescript-eslint/no-unnecessary-type-constraint": "error",
		"@typescript-eslint/no-unsafe-declaration-merging": "error",
		"@typescript-eslint/no-useless-empty-export": "error",
		"@typescript-eslint/non-nullable-type-assertion-style": "error",
		"@typescript-eslint/prefer-as-const": "error",
		"@typescript-eslint/prefer-enum-initializers": "warn",
		"@typescript-eslint/prefer-for-of": "warn",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-includes": "error",
		"@typescript-eslint/prefer-nullish-coalescing": [
			"warn",
			{
				ignoreConditionalTests: false,
				ignoreTernaryTests: false,
				ignoreMixedLogicalExpressions: false,
				allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
			},
		],
		"@typescript-eslint/prefer-optional-chain": "warn",
		"@typescript-eslint/prefer-reduce-type-parameter": "error",
		"@typescript-eslint/prefer-string-starts-ends-with": "error",
		"@typescript-eslint/prefer-ts-expect-error": "error",
		"@typescript-eslint/restrict-plus-operands": "error",
		"@typescript-eslint/switch-exhaustiveness-check": "error",
		"@typescript-eslint/unified-signatures": "error",
	},
};
