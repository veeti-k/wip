generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    username  String?  @unique
    email     String   @unique
    isAdmin   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions Session[]

    exercises Exercise[]

    sets Set[]

    modelExercises ModelExercise[]

    categories Category[]
}

model Category {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    modelExercises ModelExercise[]

    @@index([ownerId])
}

model ModelExercise {
    id            String   @id @default(cuid())
    name          String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    enabledFields BigInt   @default(0)

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    exercises Exercise[]

    @@index([ownerId])
    @@index([categoryId])
}

model Session {
    id         String    @id @default(cuid())
    name       String
    notes      String?
    bodyWeight Float?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    stoppedAt  DateTime?

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    exercises Exercise[]
    sets      Set[]

    @@index([ownerId])
}

model Exercise {
    id        String   @id @default(cuid())
    notes     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    sessionId String
    session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    modelExerciseId String
    modelExercise   ModelExercise @relation(fields: [modelExerciseId], references: [id], onDelete: Cascade)

    sets Set[]

    @@index([ownerId])
    @@index([sessionId])
    @@index([modelExerciseId])
}

enum SetType {
    SuperSet
    DropSet
    WarmUp
    Normal
}

model Set {
    id         String   @id @default(cuid())
    duplicates Int      @default(1)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    type       SetType  @default(Normal)

    weight         Float?
    assistedWeight Float?
    reps           Float?
    time           Float?
    distance       Float?
    kcal           Float?

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    sessionId String
    session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    exerciseId String
    exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

    @@index([ownerId])
    @@index([sessionId])
    @@index([exerciseId])
}

enum LogAction {
    Create
    Update
    Delete
}

enum LogActorType {
    User
    Session
    Exercise
    Set
}

enum LogActorSequenceType {
    Executor
    Target
    TargetOwner
}

model LogActor {
    id           String               @id @default(cuid())
    actorId      String
    actorType    LogActorType
    sequenceType LogActorSequenceType

    logId String
    log   Log    @relation(fields: [logId], references: [id], onDelete: Cascade)

    @@index([logId])
}

model Log {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    logAction LogAction
    actors    LogActor[]
}
